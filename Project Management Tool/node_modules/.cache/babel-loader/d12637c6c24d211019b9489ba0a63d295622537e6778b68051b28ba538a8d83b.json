{"ast":null,"code":"var _jsxFileName = \"/home/suleman/Downloads/project-management-system-react-javascript-main/src/pages/project/ProjectTasks.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Avatar from \"../../components/Avatar\";\n// import doneIcon from \"../../assets/done.svg\";\n\nimport { useAuthContext } from \"../../hooks/useAuthContext\";\nimport { useFirestore } from \"../../hooks/useFirestore\";\n// import { projectFirestore } from \"../../firebase/config\";\n\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ProjectTasks({\n  project\n}) {\n  _s();\n  const {\n    updateDocument,\n    response\n  } = useFirestore(\"projects\");\n  const [newTask, setNewTask] = useState(\"\");\n  const [taskRes, setTaskRes] = useState(null);\n  const {\n    user\n  } = useAuthContext();\n  const [users, setUsers] = useState([]);\n  const [formError, setFormError] = useState(null);\n  useEffect(() => {\n    if (project) {\n      const options = project.assignedUsersList.map(user => {\n        return {\n          value: user,\n          label: user.displayName\n        };\n      });\n      setUsers(options);\n    }\n  }, [project]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!taskRes) {\n      setFormError(\"you have to choose one for the task\");\n      return;\n    }\n    const taskToAdd = {\n      taskManName: taskRes.value.displayName,\n      photoURL: taskRes.value.photoURL,\n      taskManUID: taskRes.value.id,\n      content: newTask,\n      done: false,\n      id: Math.random()\n    };\n    console.log(taskToAdd);\n    await updateDocument(project.id, {\n      tasks: [...project.tasks, taskToAdd]\n    });\n    if (!response.error) {\n      setNewTask(\"\");\n    }\n  };\n\n  // const handleDone = async (task) => {\n  //   await projectFirestore\n  //     .collection(\"projects\")\n  //     .doc(project.id)\n\n  //     .update(task, { done: true });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: project.tasks.length > 0 ? \"tasks\" : \"no tasks yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), project.tasks && project.tasks.map(task => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"task-content\",\n          children: task.content.substr(0, 40)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-man\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: task.taskManName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n            src: task.photoURL\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)), user.uid === project.createdBy.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"add task for one selected user :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            onChange: e => setNewTask(e.target.value),\n            value: newTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: users,\n          onChange: option => setTaskRes(option)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: \"add task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), formError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: formError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectTasks, \"CksvetULWEejXtCf2SE8lzKS/Ik=\", false, function () {\n  return [useFirestore, useAuthContext];\n});\n_c = ProjectTasks;\nvar _c;\n$RefreshReg$(_c, \"ProjectTasks\");","map":{"version":3,"names":["useState","useEffect","Avatar","useAuthContext","useFirestore","Select","jsxDEV","_jsxDEV","Fragment","_Fragment","ProjectTasks","project","_s","updateDocument","response","newTask","setNewTask","taskRes","setTaskRes","user","users","setUsers","formError","setFormError","options","assignedUsersList","map","value","label","displayName","handleSubmit","e","preventDefault","taskToAdd","taskManName","photoURL","taskManUID","id","content","done","Math","random","console","log","tasks","error","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","task","substr","src","uid","createdBy","onSubmit","type","required","onChange","target","option","_c","$RefreshReg$"],"sources":["/home/suleman/Downloads/project-management-system-react-javascript-main/src/pages/project/ProjectTasks.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Avatar from \"../../components/Avatar\";\n// import doneIcon from \"../../assets/done.svg\";\n\nimport { useAuthContext } from \"../../hooks/useAuthContext\";\nimport { useFirestore } from \"../../hooks/useFirestore\";\n// import { projectFirestore } from \"../../firebase/config\";\n\nimport Select from \"react-select\";\n\nexport default function ProjectTasks({ project }) {\n  const { updateDocument, response } = useFirestore(\"projects\");\n\n  const [newTask, setNewTask] = useState(\"\");\n  const [taskRes, setTaskRes] = useState(null);\n  const { user } = useAuthContext();\n  const [users, setUsers] = useState([]);\n  const [formError, setFormError] = useState(null);\n\n  useEffect(() => {\n    if (project) {\n      const options = project.assignedUsersList.map((user) => {\n        return { value: user, label: user.displayName };\n      });\n      setUsers(options);\n    }\n  }, [project]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!taskRes) {\n      setFormError(\"you have to choose one for the task\");\n      return;\n    }\n    const taskToAdd = {\n      taskManName: taskRes.value.displayName,\n      photoURL: taskRes.value.photoURL,\n      taskManUID: taskRes.value.id,\n      content: newTask,\n      done: false,\n\n      id: Math.random(),\n    };\n\n    console.log(taskToAdd);\n    await updateDocument(project.id, {\n      tasks: [...project.tasks, taskToAdd],\n    });\n\n    if (!response.error) {\n      setNewTask(\"\");\n    }\n  };\n\n  // const handleDone = async (task) => {\n  //   await projectFirestore\n  //     .collection(\"projects\")\n  //     .doc(project.id)\n\n  //     .update(task, { done: true });\n  // };\n\n  return (\n    <div className=\"tasks\">\n      <h2>{project.tasks.length > 0 ? \"tasks\" : \"no tasks yet\"}</h2>\n      {project.tasks &&\n        project.tasks.map((task) => (\n          <>\n            <div key={task.id} className=\"task\">\n              <p className=\"task-content\">{task.content.substr(0, 40)}</p>\n\n              <div className=\"task-man\">\n                <p>{task.taskManName}</p>\n                <Avatar src={task.photoURL} />\n                {/* {user.uid === task.taskManUID && (\n                  <img\n                    onClick={() => handleDone(task)}\n                    className={`done-icon ${task.done && \"task-done\"}`}\n                    src={doneIcon}\n                    alt=\"done icon\"\n                  />\n                )} */}\n              </div>\n            </div>\n          </>\n        ))}\n\n      {user.uid === project.createdBy.id && (\n        <>\n          <form onSubmit={handleSubmit}>\n            <label>\n              <span>add task for one selected user :</span>\n              <input\n                type=\"text\"\n                required\n                onChange={(e) => setNewTask(e.target.value)}\n                value={newTask}\n              ></input>\n            </label>\n\n            <Select options={users} onChange={(option) => setTaskRes(option)} />\n\n            <button className=\"btn\">add task</button>\n          </form>\n\n          {formError && <p className=\"error\">{formError}</p>}\n        </>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}